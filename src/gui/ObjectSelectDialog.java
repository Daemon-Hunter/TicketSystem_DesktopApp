/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import database.DatabaseTable;
import events.IArtist;
import events.IVenue;
import gui.contentpanel.events.PnlNewChildEvent;
import gui.contentpanel.events.PnlEditChildEvent;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import wrappers.DesktopWrapper;

/**
 *
 * @author Dominic
 */
public class ObjectSelectDialog extends javax.swing.JFrame {

    private DatabaseTable type;
    private DefaultListModel listModel;
    private List<IVenue> listOfVenues;
    private List<IVenue> originalVenues;
    private List<IArtist> listOfArtists;
    private List<IArtist> originalArtists;
    private PnlEditChildEvent editParent;
    private PnlNewChildEvent addParent;

    /**
     * Creates new form ObjectSelectDialog
     *
     * @param table
     */
    public ObjectSelectDialog() {
        listModel = new DefaultListModel();
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        this.setResizable(false);
        initComponents();
    }

    public void setAddParent(PnlNewChildEvent parent) {
        this.addParent = parent;
    }

    public void setEditParent(PnlEditChildEvent parent) {
        this.editParent = parent;
    }

    public void setTable(DatabaseTable table) {
        this.type = table;

        switch (table) {
            case ARTIST:
                txtTitle.setText("Please Select An Artist");
                txtSearch.setText("Search Artist...");
                listOfArtists = new ArrayList<>();
                populateTable(DatabaseTable.ARTIST);
                break;

            case VENUE:
                txtTitle.setText("Please Select A Venue");
                txtSearch.setText("Search Venue...");
                listOfVenues = new ArrayList<>();
                populateTable(DatabaseTable.VENUE);
                break;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlBackground = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstObjects = new javax.swing.JList<>();
        btnCancel = new javax.swing.JButton();
        btnSelect = new javax.swing.JButton();
        txtTitle = new javax.swing.JLabel();
        txtSearch = new javax.swing.JTextField();
        searchPnlLbl = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        pnlBackground.setBackground(new java.awt.Color(51, 51, 51));

        lstObjects.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        lstObjects.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        lstObjects.setModel(listModel);
        jScrollPane1.setViewportView(lstObjects);

        btnCancel.setText("Cancel");
        btnCancel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnCancelMouseClicked(evt);
            }
        });

        btnSelect.setText("Select");
        btnSelect.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnSelectMouseClicked(evt);
            }
        });

        txtTitle.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        txtTitle.setForeground(new java.awt.Color(255, 255, 255));
        txtTitle.setText("Please Select ");

        txtSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchActionPerformed(evt);
            }
        });

        searchPnlLbl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icons/search.png"))); // NOI18N

        javax.swing.GroupLayout pnlBackgroundLayout = new javax.swing.GroupLayout(pnlBackground);
        pnlBackground.setLayout(pnlBackgroundLayout);
        pnlBackgroundLayout.setHorizontalGroup(
            pnlBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlBackgroundLayout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnSelect)
                .addGap(47, 47, 47))
            .addGroup(pnlBackgroundLayout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(txtSearch)
                .addGap(18, 18, 18)
                .addComponent(searchPnlLbl)
                .addGap(55, 55, 55))
            .addGroup(pnlBackgroundLayout.createSequentialGroup()
                .addGroup(pnlBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlBackgroundLayout.createSequentialGroup()
                        .addGap(117, 117, 117)
                        .addComponent(txtTitle))
                    .addGroup(pnlBackgroundLayout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(16, Short.MAX_VALUE))
        );
        pnlBackgroundLayout.setVerticalGroup(
            pnlBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlBackgroundLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(txtTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlBackgroundLayout.createSequentialGroup()
                        .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(pnlBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnSelect, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(searchPnlLbl))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnlBackground, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlBackground, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCancelMouseClicked
        if (JOptionPane.showConfirmDialog(this, "Are you sure you want to cancel?") == JOptionPane.OK_OPTION) {
            dispose();
        }
    }//GEN-LAST:event_btnCancelMouseClicked

    private void btnSelectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSelectMouseClicked
        if (lstObjects.getSelectedIndex() != -1 && type != null) {
            switch (type) {
                case ARTIST:
                    selectArtist();
                    break;
                case VENUE:
                    selectVenue();
                    break;
            }
        }
    }//GEN-LAST:event_btnSelectMouseClicked

    private void txtSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchActionPerformed
        if (type != null) {
            switch (type) {
                case ARTIST:
                    searchArtist();
                    break;
                case VENUE:
                    searchVenue();
                    break;
            }
        }
    }//GEN-LAST:event_txtSearchActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ObjectSelectDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ObjectSelectDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ObjectSelectDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ObjectSelectDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ObjectSelectDialog().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnSelect;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<String> lstObjects;
    private javax.swing.JPanel pnlBackground;
    private javax.swing.JLabel searchPnlLbl;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JLabel txtTitle;
    // End of variables declaration//GEN-END:variables

    private void populateTable(DatabaseTable table) {
        switch (table) {
            case VENUE:
                listModel.clear();
                try {
                    listOfVenues = DesktopWrapper.getInstance().getVenues();
                    for (IVenue venue : listOfVenues) {
                        listModel.addElement(venue.getName() + " - " + venue.getCity());
                    }
                } catch (IOException ex) {
                    listModel.addElement("No Venues Found");
                }
                break;

            case ARTIST:
                listModel.clear();
                try {
                    listOfArtists = DesktopWrapper.getInstance().getArtists();
                    for (IArtist artist : listOfArtists) {
                        listModel.addElement(artist.getName() + " - " + artist.getType());
                    }
                } catch (IOException ex) {
                    listModel.addElement("No Artists Found");
                }
                break;
            default:
                throw new IllegalArgumentException("Table not supported yet.");
        }
    }

    private void selectArtist() {
        if (lstObjects.getSelectedIndex() != -1) {
            if (addParent != null) {
                addParent.addToLineup(listOfArtists.get(lstObjects.getSelectedIndex()));
                dispose();
            } else if (editParent != null) {
                editParent.addLineup(listOfArtists.get(lstObjects.getSelectedIndex()));
                dispose();
            }
        }
    }

    private void selectVenue() {
        if (lstObjects.getSelectedIndex() != -1) {
            if (addParent != null) {
                addParent.setVenue(listOfVenues.get(lstObjects.getSelectedIndex()));
                dispose();
            } else if (editParent != null) {
                System.out.println(listOfVenues.get(lstObjects.getSelectedIndex()).getCity());
                editParent.setVenue(listOfVenues.get(lstObjects.getSelectedIndex()));
                dispose();
            }
        }

    }

    private void searchArtist() {
        String textToSearch = txtSearch.getText();
        if (!textToSearch.equals("")) {
            try {
                listOfArtists = DesktopWrapper.getInstance().searchArtists(textToSearch);
                listModel.clear();
                for (IArtist artist : listOfArtists) {
                    listModel.addElement(artist.getName() + " - " + artist.getType());

                }

            } catch (IOException ex) {
                System.out.println("Nah");
                listOfArtists = originalArtists;
                listModel.clear();
                populateTable(type);
            }
        } else {
            listModel.clear();
            listOfArtists = originalArtists;
            populateTable(type);

        }

    }

    private void searchVenue() {
        String textToSearch = txtSearch.getText();
        if (!textToSearch.equals("")) {
            try {
                listOfVenues = DesktopWrapper.getInstance().searchVenues(textToSearch);
                listModel.clear();
                for (IVenue venue : listOfVenues) {
                    listModel.addElement(venue.getName() + " - " + venue.getCity());
                }

            } catch (IOException ex) {
                listModel.clear();
                listOfVenues = originalVenues;
                populateTable(type);

            }
        } else {
            listModel.clear();
            listOfVenues = originalVenues;
            populateTable(type);
        }
    }
}
